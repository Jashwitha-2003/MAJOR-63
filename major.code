from flask import Flask, render_template, request
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.metrics import AUC
import numpy as np
app = Flask(__name__)
dependencies = {
 'auc_roc': AUC
}
verbose_name = {
0: 'Actinic keratoses and intraepithelial carcinomae',
1: 'Basal cell carcinoma',
2: 'Benign keratosis-like lesions',
3: 'Dermatofibroma',
4: 'Melanocytic nevi',
5: 'Pyogenic granulomas and hemorrhage',
6: 'Melanoma',
 }
model = load_model('skin.h5')
def predict_label(img_path):
test_image = image.load_img(img_path, target_size=(28,28))
test_image = image.img_to_array(test_image)/255.0
test_image = test_image.reshape(1, 28,28,3)
predict_x=model.predict(test_image)
classes_x=np.argmax(predict_x,axis=1)
return verbose_name[classes_x[0]]
@app.route("/")
@app.route("/first")
def first():
return render_template('first.html')

@app.route("/login")
def login():
return render_template('login.html')

@app.route("/index", methods=['GET', 'POST'])
def get_output():
if request.method == 'POST':
img = request.files['my_image']
img_path = "static/tests/" + img.filename
img.save(img_path)
predict_result = predict_label(img_path)
return render_template("prediction.html", prediction = predict_result, img_path =
img_path)

@app.route("/Graph")
def Graph():
return render_template('Graph.html')
@app.route("/chart")
def chart():
return render_template('chart.html')
if __name__ =='__main__':
app.run(debug = True)
import numpy as np
import pandas as pd
Data Loading
data = pd.read_csv("D:\skin cancer\hmnist_28_28_RGB.csv")
data.head()
meta_df = pd.read_csv("D:\skin cancer\HAM10000_metadata.csv")
meta_df.head()
meta_df.shape
(10015, 7)
data.shape
(10015, 2353)
yData = data['label']
XData = data.drop(columns = ['label'])
EDA
distribution = meta_df['dx'].value_counts()
distribution
Name: count, dtype: int64
# classes = {4: ('nv', ' melanocytic nevi'),
# 6: ('mel', 'melanoma'),
# 2 :('bkl', 'benign keratosis-like lesions'),
# 1:('bcc' , ' basal cell carcinoma'),
# 5: ('vasc', ' pyogenic granulomas and hemorrhage'),
# 0: ('akiec', 'Actinic keratoses and intraepithelial carcinomae'),
# 3: ('df', 'dermatofibroma')}
dist = data['label'].value_counts()
dist
label
Fixing Data Imbalance
over sample the dateset using Random Over Sampler
from imblearn.over_sampling import RandomOverSampler
sampler = RandomOverSampler()
XData,yData = sampler.fit_resample(XData,yData)
XData.shape, yData.shape
((46935, 2352), (46935,))
XData = np.array(XData).reshape((-1, 28, 28, 3))
XData = XData / 255
XData.shape
(46935, 28, 28, 3)
Create the train and validation set
from sklearn.model_selection import train_test_split
Xtrain, Xtest, Ytrain, Ytest = train_test_split(XData,yData, test_size=0.2)
Xtrain.shape, Xtest.shape
((37548, 28, 28, 3), (9387, 28, 28, 3))
Train the model
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
import tensorflow as tf
img_width, img_height = 28,28
input_shape = (img_width, img_height, 3)
model = Sequential()
model.add(Conv2D(32, (2, 2), input_shape=input_shape))
model.add(Activation('swish'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(32, (2, 2)))
model.add(Activation('swish'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (2, 2)))
model.add(Activation('swish'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64))
model.add(Activation('swish'))
model.add(Dropout(0.5))
model.add(Dense(7))
model.add(Activation('softmax'))
model.compile(loss='sparse_categorical_crossentropy',
optimizer='nadam',
metrics=['accuracy'])
callback = tf.keras.callbacks.ModelCheckpoint(filepath='skin.h5',
 monitor='val_acc', mode='max',
 verbose=1)
early_stopping = tf.keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)
history = model.fit(Xtrain,
 Ytrain,
 epochs = 100,
 validation_data = (Xtest, Ytest),
 callbacks=[callback, early_stopping])
